from datetime import datetime
from typing import Dict, Any

from ..models.calendar import ContentItem, ContentType, Platform, SEOData
from ..core.content_brief import ContentBriefGenerator

def create_content_brief(
    title: str,
    content_type: ContentType,
    platforms: list[Platform],
    website_url: str,
    target_audience: Dict[str, Any]
) -> Dict[str, Any]:
    """
    Create a content brief for the given content.
    
    Args:
        title: Content title
        content_type: Type of content
        platforms: List of platforms to publish on
        website_url: Website URL for context
        target_audience: Target audience information
        
    Returns:
        Dictionary containing the content brief
    """
    # Create content item
    content_item = ContentItem(
        id=f"content-{datetime.now().strftime('%Y%m%d%H%M%S')}",
        title=title,
        description=f"Content brief for {title}",
        content_type=content_type,
        platforms=platforms,
        publish_date=datetime.now(),
        seo_data=SEOData(
            keywords=[],  # Will be generated by SEO tools
            meta_description="",  # Will be generated by SEO tools
            structured_data={}
        ),
        platform_specs={},  # Will be generated based on platforms
        context={
            "website_url": website_url,
            "target_audience": target_audience.get("demographics", {}).get("profession", ""),
            "content_goals": ["educate", "generate leads"]
        }
    )
    
    # Initialize content brief generator
    generator = ContentBriefGenerator()
    
    # Generate brief
    brief = generator.generate_brief(
        content_item=content_item,
        target_audience=target_audience
    )
    
    return brief

def main():
    """Example usage of content brief generation."""
    # Example content details
    title = "10 Ways to Improve Your SEO Strategy"
    content_type = ContentType.BLOG_POST
    platforms = [Platform.WEBSITE, Platform.LINKEDIN]
    website_url = "https://example.com"
    
    # Example target audience
    target_audience = {
        "demographics": {
            "age_range": "25-45",
            "profession": "digital marketers",
            "experience_level": "intermediate"
        },
        "interests": [
            "SEO",
            "content marketing",
            "digital strategy",
            "search engine optimization"
        ],
        "pain_points": [
            "low search rankings",
            "poor content performance",
            "lack of organic traffic",
            "difficulty in keyword research"
        ],
        "goals": [
            "improve search rankings",
            "increase organic traffic",
            "generate more leads",
            "build brand authority"
        ]
    }
    
    try:
        # Generate content brief
        brief = create_content_brief(
            title=title,
            content_type=content_type,
            platforms=platforms,
            website_url=website_url,
            target_audience=target_audience
        )
        
        # Print brief summary
        print("\nContent Brief Summary:")
        print(f"Title: {brief['title']}")
        print(f"Content Type: {brief['content_type']}")
        
        print("\nOutline:")
        for heading in brief['outline']['main_headings']:
            print(f"\n- {heading['title']}")
            print(f"  Keywords: {', '.join(heading['keywords'])}")
            print(f"  Summary: {heading['summary']}")
            
            # Print subheadings
            subheadings = brief['outline']['subheadings'].get(heading['title'], [])
            for subheading in subheadings:
                print(f"  - {subheading['title']}")
                print(f"    Keywords: {', '.join(subheading['keywords'])}")
        
        print("\nKey Points:")
        for point in brief['key_points']:
            print(f"\n- {point['point']}")
            print(f"  Importance: {point['importance']}")
            print(f"  Evidence: {', '.join(point['supporting_evidence'])}")
        
        print("\nContent Flow:")
        flow = brief['content_flow']
        print(f"Introduction: {flow['introduction'].get('summary', '')}")
        print(f"Main Sections: {len(flow['main_sections'])} sections")
        print(f"Conclusion: {flow['conclusion'].get('summary', '')}")
        print(f"Transitions: {len(flow['transitions'])} transition points")
        
    except Exception as e:
        print(f"Error generating content brief: {str(e)}")

if __name__ == '__main__':
    main() 